name: Build OnePlus Kernel # 构建一加内核

on:
  workflow_dispatch:
    inputs:
      SoC:
        description: "芯片型号 // SoC to build"
        required: true
        default: 'sm8750'

      FEIL:
        description: "配置文件名 // Configuration file name"
        required: true
        default: 'oneplus_13_v'

      Chipset:
        description: "开发板代号 // Chipset codename"
        required: true
        default: 'sun'

      VERSION:
        description: "版本格式 // Format: android15-6.6 [Android版本-内核版本]"
        required: true
        default: 'android15-6.6'

      KERNEL_NAME:
        description: "内核名称后缀 // Kernel name suffix"
        required: true
        default: '-android15-8-g013ec21bba94-abogki383916444'

      KSU_CONFIG:
        description: "选择 KernelSU 配置 // Select KernelSU configuration"
        required: true
        type: choice
        options:
          - Kernel_without_KSU
          - SukiSU-dev
          - SukiSU-stable
        default: SukiSU-dev

      SUSFS:
        description: "启用 SUSFS // Enable SUSFS"
        required: true
        type: choice
        options:
          - enable
          - disable
        default: enable

      VFS_PATCH:
        description: "启用 VFS 补丁（添加新钩子） // Enable VFS patch (add new hooks)"
        required: true
        type: choice
        options:
          - enable
          - disable
        default: enable

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Parse VERSION input # 解析 VERSION 输入
        run: |
          VERSION=$(echo "${{ github.event.inputs.VERSION }}")
          ANDROID_VERSION=$(echo "$VERSION" | cut -d'-' -f1)
          KERNEL_VERSION=$(echo "$VERSION" | cut -d'-' -f2)
          echo "ANDROID_VERSION=$ANDROID_VERSION" >> $GITHUB_ENV
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: Maximize build space # 最大化构建空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git & Install dependencies # 配置 Git & 安装依赖
        run: |
          git config --global user.name "schqiushui"
          git config --global user.email "orochi9999@gmail.com"
          sudo apt update -y
          sudo apt-mark hold firefox
          sudo apt upgrade -y -o Dpkg::Options::="--force-confold"
          sudo apt install -y python3 git curl

      - name: Install repo tool # 安装 repo 工具
        run: |
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync # 初始化 repo 和同步
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/schqiushui/kernel_manifest.git -b refs/heads/oneplus/${{ inputs.SoC }} -m ${{ inputs.FEIL }}.xml --depth=1 || { echo "repo init 失败"; exit 1; }
          repo sync -c -j$(nproc --all) --no-tags || { echo "repo sync 失败"; exit 1; }
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          sed -i 's/ -dirty//g' kernel_platform/common/scripts/setlocalversion
          sed -i 's/ -dirty//g' kernel_platform/msm-kernel/scripts/setlocalversion
          sed -i 's/ -dirty//g' kernel_platform/external/dtc/scripts/setlocalversion

      - name: KernelSU setup # 配置 KernelSU
        if: ${{ startsWith(inputs.KSU_CONFIG, 'SukiSU') }}
        run: |
          cd kernel_workspace/kernel_platform
          echo "KSU_BRANCH=susfs-$(echo ${{ inputs.KSU_CONFIG }} | sed 's/SukiSU-//')" >> $GITHUB_ENV
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s ${{ env.KSU_BRANCH }}
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12500/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          echo "KernelSU 版本：$KSU_VERSION"

      - name: Apply SUSFS & Hide patches # 应用 SUSFS & 隐藏补丁
        if: ${{ startsWith(inputs.KSU_CONFIG, 'SukiSU') && inputs.SUSFS == 'enable' }}
        run: |
          cd kernel_workspace
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}

          cd kernel_platform/common
          # Copy SUSFS patches
          cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./
          cp ../../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../../susfs4ksu/kernel_patches/include/linux/* ./include/linux/

          echo "正在给内核打 susfs 补丁..."
          if [[ "${{ env.KERNEL_VERSION }}" == "6.6" ]]; then
            sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace/hooks/fs.h>' ./fs/namespace.c
          fi
          patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || { echo "应用 susfs 补丁失败"; exit 1; }
          echo "susfs 补丁应用完成"

          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "正在打隐藏应用补丁..."
          patch -p1 -F 3 < 69_hide_stuff.patch || { echo "应用隐藏应用补丁失败"; exit 1; }
          echo "隐藏应用补丁应用完成"

      - name: Apply New Hooks patches # 应用新的钩子补丁
        if: ${{ startsWith(inputs.KSU_CONFIG, 'SukiSU') && inputs.VFS_PATCH == 'enable' }}
        run: |
          cd kernel_workspace
          if [ ! -d SukiSU_patch ]; then
            git clone https://github.com/ShirkNeko/SukiSU_patch.git
          else
            echo "SukiSU_patch 目录已存在，跳过克隆。"
          fi
          cd kernel_platform/common
          cp ../../SukiSU_patch/hooks/new_hooks.patch ./
          echo "正在打 vfs 补丁..."
          patch -p1 -F 3 < new_hooks.patch || { echo "应用 vfs 补丁失败"; exit 1; }
          echo "vfs 补丁应用完成"

      - name: Configure kernel # 配置内核
        if: ${{ startsWith(inputs.KSU_CONFIG, 'SukiSU') }}
        run: |
          cd kernel_workspace/kernel_platform
          echo "正在配置内核..."
          DEFCONFIG="./common/arch/arm64/configs/gki_defconfig"
          echo "CONFIG_KSU=y" >> "$DEFCONFIG"
          echo "CONFIG_KPM=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_SU=${{ inputs.VFS_PATCH == 'enable' && 'n' || 'y' }}" >> "$DEFCONFIG"
          echo "CONFIG_KSU_MANUAL_HOOK=${{ inputs.VFS_PATCH == 'enable' && 'y' || 'n' }}" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$DEFCONFIG"
          sed -i 's/check_defconfig//' ./common/build.config.gki
          echo "内核配置完成"
          cat $DEFCONFIG

      - name: Set kernel name # 设置内核名称
        run: |
          cd kernel_workspace/kernel_platform
          echo "正在设置内核名称..."

          if [[ "${{ inputs.Chipset }}" == "pineapple" || "${{ inputs.Chipset }}" == "sun" ]]; then
            sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
          fi
          sed -i '$s|echo "\$res"|echo "\${{ inputs.KERNEL_NAME }}"|' ./common/scripts/setlocalversion
          echo "内核名称设置完成"

      - name: Build kernel # 构建内核
        run: |
          cd kernel_workspace

          BUILD_TYPE="gki"
          BAZEL_ARGS=(--jobs=$(nproc --all) --lto=thin)
          if [ "${{ inputs.Chipset }}" == "sun" ]; then
            BUILD_TYPE="perf"
          fi

          echo "开始构建内核，构建类型：$BUILD_TYPE，Bazel 参数：${BAZEL_ARGS[@]}"

          if [[ "${{ inputs.Chipset }}" == "pineapple" || "${{ inputs.Chipset }}" == "sun" ]]; then
            ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ inputs.Chipset }} "$BUILD_TYPE" --action_env=KSU_VERSION
          else
            ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ inputs.Chipset }} "$BUILD_TYPE" "${BAZEL_ARGS[@]}" --action_env=KSU_VERSION
          fi

      - name: Check Image Exists # 检查 Image 文件是否存在
        id: check_image
        run: |
          IMAGE_PATH=$(find ./kernel_workspace/kernel_platform/out -name "Image")
          if [ -n "$IMAGE_PATH" ]; then
            echo "Image 文件已找到：$IMAGE_PATH"
            echo "image_exists=true" >> $GITHUB_OUTPUT
            echo "image_path=$IMAGE_PATH" >> $GITHUB_OUTPUT
          else
            echo "Image 文件未找到"
            echo "image_exists=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Make AnyKernel3 # 制作 AnyKernel3
        if: ${{ steps.check_image.outputs.image_exists == 'true' }}
        run: |
          mkdir -p image_output
          git clone https://github.com/schqiushui/AnyKernel3-KernelSU-Next.git -b gki-2.0 --depth=1 && rm -rf ./AnyKernel3-KernelSU-Next/.git

          cp ${{ steps.check_image.outputs.image_path }} ./image_output/Image
          cp ${{ steps.check_image.outputs.image_path }} ./AnyKernel3-KernelSU-Next/Image

          BOOTIMG_PATH=$(find ./kernel_workspace/kernel_platform/out -name "boot.img")
          if [ -n "$BOOTIMG_PATH" ]; then
            cp "$BOOTIMG_PATH" ./image_output/boot.img
            echo "boot.img 文件已找到，并复制到指定路径"
          else
            echo "boot.img 文件未找到，已跳过复制"
          fi

      - name: Apply patch_linux and replace Image # 应用 patch_linux 并替换 Image
        if: ${{ inputs.VFS_PATCH == 'enable' && steps.check_image.outputs.image_exists == 'true' }}
        run: |
          cd image_output
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux || { echo "应用 patch_linux 失败"; exit 1; }

          cp oImage ../AnyKernel3-KernelSU-Next/Image
          echo "Patched Image 文件替换成功"

      - name: Get formatted date # 获取格式化日期
        id: formatted_date
        run: |
          DATE=$(date +'%y%m%d-%H%M')
          echo "formatted=$DATE" >> $GITHUB_OUTPUT

      - name: Upload AnyKernel3 # 上传 AnyKernel3
        uses: actions/upload-artifact@v4
        if: ${{ steps.check_image.outputs.image_exists == 'true' }}
        with:
          name: AnyKernel3-${{ inputs.FEIL }}-SukiSU-${{ env.KSUVER }}-${{ steps.formatted_date.outputs.formatted }}
          path: ./AnyKernel3-KernelSU-Next/*

      - name: Upload Image # 上传 Image
        uses: actions/upload-artifact@v4
        if: ${{ steps.check_image.outputs.image_exists == 'true' }}
        with:
          name: Image-KernelSU-${{ env.KSUVER }}-${{ inputs.FEIL }}-${{ steps.formatted_date.outputs.formatted }}
          path: ./image_output/*
